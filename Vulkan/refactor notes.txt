Refactors:
- Window: 
	- Does not initialise graphics context. Has getters to retrieve the information to do so
	- No knowledge of the graphics factory, not the window's responsibility
	- Remove surface from window
		- In vulkan this is just to have the platform abstraction and is used to create the swapchain
			- Think D3D11SwapChain where instead of hWnd it's a VkSurface
- Render: 
	- Takes in window and api enum and initialises the context it needs
	- Owns the graphics factory
- Mesh:
	- Vertex buffer should be the full size of vertex * elements (so Mesh only has a single gfx::Buffer)
		- Vertex attributes can be used to properly offset into the master vertex buffer
- Vertex:
	- Remove overcomplicated vertex buffer generator (do not need something like that right now)
	- Bulb will have a Vertex struct that contains all elements that it's shaders will ever need
		- Can reimplement the fancy thing much later down the road when supporting use made renderers
		- Vertex attributes from shaders can be used to offset into the elements that the shader needs
- Indices
	- As before, no special treament required
- Shaders:
	- Vertex attributes should be generated from shaders	
- Materials:
	- Simplify materials. Create flags for all the settings the materials will have