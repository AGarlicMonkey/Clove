#Variables / Anchors
.windows_prepare: &set_up_windows_env
  before_script:
    - git submodule update --init --recursive
    - choco install -y conan
    - choco install -y cmake
    - choco install -y python
    - choco upgrade -y visualstudio2019buildtools
    - curl.exe -o vksdk.exe https://sdk.lunarg.com/sdk/download/1.2.154.1/windows/VulkanSDK-1.2.154.1-Installer.exe?Human=true
    - .\vksdk.exe /S /D=C:\VulkanSDK | Out-Null
    - $env:VULKAN_SDK = 'C:\VulkanSDK'
    - $env:Path += ';C:\Program Files\CMake\bin;C:\VulkanSDK\Bin;C:\Program Files\Conan\conan'

.windows_tag: &windows_runner_tags
  tags:
    - windows-1809

variables:
  CMAKE_COMPILER_GCC: '-DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10'
  CMAKE_COMPILER_CLANG: '-DCMAKE_C_COMPILER=clang-10 -DCMAKE_CXX_COMPILER=clang++-10'
  CMAKE_RELEASE: '-DCLOVE_ENABLE_ASSERTIONS=ON -DCLOVE_ENABLE_DEBUG_DEFINITION=ON -DCLOVE_ENABLE_PROFILING=ON -DGAR_BUILD_EXAMPLES=ON -DGAR_BUILD_TESTS=ON'
  CMAKE_TEST: '-DCLOVE_ENABLE_ASSERTIONS=ON -DCLOVE_ENABLE_DEBUG_DEFINITION=ON -DCLOVE_ENABLE_PROFILING=OFF -DGAR_BUILD_EXAMPLES=OFF -DGAR_BUILD_TESTS=ON'
  CMAKE_DEBUG: '-DCLOVE_ENABLE_ASSERTIONS=OFF -DCLOVE_ENABLE_DEBUG_DEFINITION=OFF -DCLOVE_ENABLE_PROFILING=OFF -DGAR_BUILD_EXAMPLES=OFF -DGAR_BUILD_TESTS=OFF'
  ENGINE_CMAKE_RELEASE: '$CMAKE_RELEASE -DGAR_BUILD_BULB=OFF'
  ENGINE_CMAKE_TEST: '$CMAKE_TEST -DGAR_BUILD_BULB=OFF'
  ENGINE_CMAKE_DEBUG: '$CMAKE_DEBUG -DGAR_BUILD_BULB=OFF'
  EDITOR_CMAKE_RELEASE: '$ENGINE_CMAKE_RELEASE -DGAR_BUILD_BULB=ON'
  EDITOR_CMAKE_TEST: '$ENGINE_CMAKE_TEST -DGAR_BUILD_BULB=ON'
  EDITOR_CMAKE_DEBUG: '$ENGINE_CMAKE_DEBUG -DGAR_BUILD_BULB=ON'
  DOCKER_LINUX_BUILD: 'registry.gitlab.com/digital-vessel/garlic-engine/garlic/build_environment/linux:5.0.0'

stages:
  - build
  - test
  - deploy

#Build
build-release-msvc:
  stage: build
  <<: *windows_runner_tags
  <<: *set_up_windows_env
  script:
    - mkdir build
    - cd build
    - cmake $EDITOR_CMAKE_RELEASE -G "Visual Studio 16 2019" ..
    - cmake --build . --target ALL_BUILD --config Release
  artifacts:
    paths:
      - build/
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always

build-test-msvc:
  stage: build
  <<: *windows_runner_tags
  <<: *set_up_windows_env
  script:
    - mkdir build
    - cd build
    - cmake $EDITOR_CMAKE_TEST -G "Visual Studio 16 2019" ..
    - cmake --build . --target ALL_BUILD --config Release
  artifacts:
    paths:
      - build/

build-debug-msvc:
  stage: build
  <<: *windows_runner_tags
  <<: *set_up_windows_env
  script:
    - mkdir build
    - cd build
    - cmake $EDITOR_CMAKE_DEBUG -G "Visual Studio 16 2019" ..
    - cmake --build . --target ALL_BUILD --config Debug

build-release-gcc:
  stage: build
  image: $DOCKER_LINUX_BUILD
  before_script:
    - git submodule update --init --recursive
  script:
    - mkdir build
    - cd build
    - cmake $ENGINE_CMAKE_RELEASE -DCMAKE_BUILD_TYPE=Release $CMAKE_COMPILER_GCC -G "Unix Makefiles" ..
    - cmake --build .
  artifacts:
    paths:
      - build/
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always

build-test-gcc:
  stage: build
  image: $DOCKER_LINUX_BUILD
  before_script:
    - git submodule update --init --recursive
  script:
    - mkdir build
    - cd build
    - cmake $ENGINE_CMAKE_TEST -DCMAKE_BUILD_TYPE=Release $CMAKE_COMPILER_GCC -G "Unix Makefiles" ..
    - cmake --build .
  artifacts:
    paths:
      - build/

build-debug-gcc:
  stage: build
  image: $DOCKER_LINUX_BUILD
  before_script:
    - git submodule update --init --recursive
  script:
    - mkdir build
    - cd build
    - cmake $ENGINE_CMAKE_DEBUG -DCMAKE_BUILD_TYPE=Debug $CMAKE_COMPILER_GCC -G "Unix Makefiles" ..
    - cmake --build .

build-release-clang:
  stage: build
  image: $DOCKER_LINUX_BUILD
  before_script:
    - git submodule update --init --recursive
  script:
    - mkdir build
    - cd build
    - cmake $ENGINE_CMAKE_RELEASE -DCMAKE_BUILD_TYPE=Release $CMAKE_COMPILER_CLANG -G "Unix Makefiles" ..
    - cmake --build .
  artifacts:
    paths:
      - build/
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always

build-test-clang:
  stage: build
  image: $DOCKER_LINUX_BUILD
  before_script:
    - git submodule update --init --recursive
  script:
    - mkdir build
    - cd build
    - cmake $ENGINE_CMAKE_TEST -DCMAKE_BUILD_TYPE=Release $CMAKE_COMPILER_CLANG -G "Unix Makefiles" ..
    - cmake --build .
  artifacts:
    paths:
      - build/

build-debug-clang:
  stage: build
  image: $DOCKER_LINUX_BUILD
  before_script:
    - git submodule update --init --recursive
  script:
    - mkdir build
    - cd build
    - cmake $ENGINE_CMAKE_DEBUG -DCMAKE_BUILD_TYPE=Debug $CMAKE_COMPILER_CLANG -G "Unix Makefiles" ..
    - cmake --build .

#Test
test-msvc:
  stage: test
  image: $DOCKER_LINUX_BUILD
  before_script:
    - choco install -y cmake
    - $env:Path += ';C:\Program Files\CMake\bin'
  script:
    - cd build
    - ctest -C Release
  dependencies:
    - build-test-msvc
  needs:
    - build-test-msvc

test-gcc:
  stage: test
  image: $DOCKER_LINUX_BUILD
  script:
    - cd build
    - ctest -C Release
  dependencies:
    - build-test-gcc
  needs:
    - build-test-gcc

test-clang:
  stage: test
  image: $DOCKER_LINUX_BUILD
  script:
    - cd build
    - ctest -C Release
  dependencies:
    - build-test-clang
  needs:
    - build-test-clang

#Deploy
doxygen:
  stage: deploy
  image: alpine
  before_script:
    - apk update
    - apk add doxygen
  script:
    - doxygen Doxyfile
  artifacts:
    paths:
      - docs/